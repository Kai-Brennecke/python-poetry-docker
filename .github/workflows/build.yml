name: Docker Build and Publish

on:
  schedule:
    - cron: "00 3 * * *"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/poetry

jobs:
  keep-alive:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Keep Workflow Alive
        uses: gautamkrishnar/keepalive-workflow@v2

  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      create-tags: ${{ steps.image-exists.conclusion == 'success' && steps.image-exists.outcome == 'failure' }}
      semver-tag: ${{ steps.version.outputs.poetry }}
      date-tag: ${{ steps.version.outputs.date }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.4.0
        with:
          cosign-release: 'v2.2.2'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.1.0

      # Login against a Docker registry
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          sep-tags: ','
          flavor: latest=true
          tags: type=schedule,pattern={{date 'YYYY-MM-DD' tz='Europe/Berlin'}}


      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build Docker image
        uses: docker/build-push-action@v5.2.0
        with:
          context: .
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:local
          labels: ${{ steps.meta.outputs.labels }}

      - name: Get Image Version
        id: version
        run: |
          docker run ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:local sh -c 'echo alpine=$(cat /etc/alpine-release)' >> $GITHUB_OUTPUT
          docker run ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:local sh -c 'echo python=$(cat .container_version | grep ^Python | grep -Eo [0-9]{1,}.[0-9]{1,}.[0-9]{1,})' >> $GITHUB_OUTPUT
          docker run ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:local sh -c 'echo poetry=$(cat .container_version | grep ^Poetry | grep -Eo [0-9]{1,}.[0-9]{1,}.[0-9]{1,})' >> $GITHUB_OUTPUT
          echo date=$(date +'%Y-%m-%d') >> $GITHUB_OUTPUT

      - name: Set Full Version
        run: |
          echo FULL_VERSION=${{ steps.version.outputs.poetry }}-python-${{ steps.version.outputs.python }}-alpine-${{ steps.version.outputs.alpine }} >> $GITHUB_ENV

      - name: Pull existing image
        id: image-exists
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.FULL_VERSION }}
        continue-on-error: true

      - name: Push Docker Image
        if: ${{ steps.image-exists.conclusion == 'success' && steps.image-exists.outcome == 'failure' }}
        id: build
        uses: docker/build-push-action@v5.2.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.FULL_VERSION }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: ${{ steps.meta.outputs.labels }}

      # Sign the resulting Docker image digest.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ steps.image-exists.conclusion == 'success' && steps.image-exists.outcome == 'failure' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.FULL_VERSION }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.poetry }}
          DIGEST: ${{ steps.build.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo -n "${TAGS}" | xargs --verbose -d "," -I {} cosign sign --yes {}@${DIGEST}

  tag-and-release-date:
    needs: [build-and-publish]
    uses: ./.github/workflows/tag-and-release.yml
    with:
      create: ${{ needs.build-and-publish.outputs.create-tags == 'true' }}
      tag: ${{ needs.build-and-publish.outputs.date-tag }}
